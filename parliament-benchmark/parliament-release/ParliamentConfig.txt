
# Parameters file for the Parliament core DLL

kbDirectoryPath        = parliament_kb
stmtFileName           = statements.mem
rsrcFileName           = resources.mem
uriTableFileName       = uris.mem
uriToIntFileName       = u2i.db
stmtToIdFileName       = stmt2id.db

readOnly               = no
fileSyncTimerDelay     = 15000
keepDupStmtIdx         = no
initialRsrcCapacity    = 100000
avgRsrcLen             = 64
rsrcGrowthFactor       = 1.25
initialStmtCapacity    = 500000
stmtGrowthFactor       = 1.25

# The amount of memory to be devoted to the Berkeley DB cache.  The portion before
# the comma is the total cache size (with a k for kilobytes, m for megabytes, g for
# gigabytes).  The portion after the comma specifies how many segments the memory
# should be broken across, for compatibility with systems that limit the size of
# single memory allocations.
bdbCacheSize           = 32m,1

runAllRulesAtStartup   = yes

# If upgrading a triple store from version 2.7.9 or prior, either set this option
# to "no" or export, clear, and then restore the backup:
normalizeTypedStringLiterals = yes

# Sets up the following rules:
# * "A is a subclass of B" ^ "B is a subclass of C" ==> "A is a subclass of C"
# * "X is of type A" ^ "A is a subclass of B" ==> "X is of type B"
# * If inferRdfsClass is true: "A is a subclass of B" ==> "A and B are of type rdfs:Class"
# * If inferOwlClass is true: "A is a subclass of B" ==> "A and B are of type owl:Class"
# * If inferRdfsResource is true: "A is a subclass of B" ==> "A and B are subclasses of rdfs:Resource"
# * If inferOwlThing is true: "A is a subclass of B" ==> "A and B are subclasses of owl:Thing"
SubclassRule           = on
inferRdfsClass         = on
inferOwlClass          = off
inferRdfsResource      = on
inferOwlThing          = off

# Sets up the following rules:
# * "P is a subproperty of Q" ^ "Q is a subproperty of R" ==> "P is a subproperty of R"
# * "P is a subproperty of Q" ^ "P(X, Y)" ==> "Q(X, Y)"
SubpropertyRule        = on

# Sets up the following rule:
# * "P has domain C" ^ "P(X, Y)" ==> "X is of type C"
DomainRule             = on

# Sets up the following rule:
# * "P has range C" ^ "P(X, Y)" ==> "Y is of type C"
RangeRule              = on

# Sets up the following rule:
# * "A is equivalent to B" ==> "A is a subclass of B" ^ "B is a subclass of A"
EquivalentClassRule    = off

# Sets up the following rule:
# * "P is equivalent to Q" ==> "P is a subproperty of Q" ^ "Q is a subproperty of P"
EquivalentPropRule     = off

# Sets up the following rule:
# * "P is the inverse of Q" ^ "P(X, Y)" ==> "Q(Y, X)"
InverseOfRule          = off

# Sets up the following rule:
# * "P is symmetric" ^ "P(X, Y)" ==> "P(Y, X)"
SymmetricPropRule      = off

# Sets up the following rule:
# * "P is a functional property" ^ "P(Z, X)" ^ "P(Z, Y)" ==> "owl:sameAs(X, Y)"
FunctionalPropRule     = off

# Sets up the following rule:
# * "P is an inverse functional property" ^ "P(X, Z)" ^ "P(Y, Z)" ==> "owl:sameAs(X, Y)"
InvFunctionalPropRule  = off

# Sets up the following rule:
# * "P is a transitive property" ^ "P(X, Y)" ^ "P(Y, Z)" ==> "P(X, Z)"
TransitivePropRule     = off
