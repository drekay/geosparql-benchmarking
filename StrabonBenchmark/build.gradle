apply plugin: 'application'
mainClassName = 'geosparql_benchmarking.strabon.Main'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'geosparql_benchmarking.strabon.Main'
}

dependencies {

    //Core Benchmarking Project
    implementation project(":Core")

    //Jar Libraries
    implementation fileTree(dir: 'libs/strabon', include: '*.jar')

    //Postgresql
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.1'

    //SLF4J Log4j
    //implementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
    implementation "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    //SLF4J Logback
    implementation "ch.qos.logback:logback-classic:$logbackVersion"

    //System Out Bridge to Logging
    implementation "uk.org.lidalia:sysout-over-slf4j:$sysoutBridgeVersion"
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task runMicro(type:JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args "micro"
}

task runMicroWarm(type:JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args "micro", "warm"
}

task runMicroCold(type:JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args "micro", "cold"
}

task runMacro(type:JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args "macro"
}

task runMacroReverseGeocoding(type:JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args "macro_reverse_geocoding"
}

task runGeosparql(type:JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args "geosparql"
}

task runGeosparqlConformance(type:JavaExec){
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
    args "geosparql", "conformance"
}